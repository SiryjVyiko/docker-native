{
    "jpsType": "install",
    "id": "docker-compose",
    "description": "## Docker Swarm Cluster or Signle Compose Engine\n```docker swarm```",
    "logo": "http://getcarina.github.io/jupyterhub-tutorial/slides/img/docker-swarm.png",
    "success": "The environment has been successfully created.",
    "name": "Docker Native",
    "region": "vz7",
    "settings": {
        "fields": [{
            "name": "mode",
            "type": "radio-fieldset",
            "caption": "Mode",
            "values": {
                "single": "Docker Engine (Single Node)",
                "cluster": "Swarm Cluster"
            },
            "default": "cluster",
            "showIf": {
                "single": {
                    "name": "compose",
                    "type": "radio-fieldset",
                    "caption": "Mode",
                    "values": {
                        "empty": "Empty Docker Engine",
                        "deploy": "Deploy Compose YML"
                    },
                    "default": "empty",
                    "showIf": {
                        "deploy": {
                            "name": "repo",
                            "type": "string",
                            "caption": "Compose Repo",
                            "default": "https://github.com/docker/example-voting-app.git"
                        }
                    }
                },
                "cluster": [{
                    "type": "spinner",
                    "name": "mngr",
                    "caption": "Manager",
                    "min": 1,
                    "max": 10,
                    "default": 3
                }, {
                    "type": "spinner",
                    "name": "worker",
                    "caption": "Worker",
                    "min": 1,
                    "max": 20,
                    "default": 5
                }, {
                    "name": "stack",
                    "type": "radio-fieldset",
                    "caption": "Mode",
                    "values": {
                        "empty": "Empty Cluster",
                        "deploy": "Deploy Stack YML"
                    },
                    "default": "empty",
                    "showIf": {
                        "deploy": {
                            "name": "stack",
                            "type": "string",
                            "caption": "Stack YML Url",
                            "default": "https://raw.githubusercontent.com/vfarcic/docker-flow-proxy/master/docker-compose-stack.yml"
                        }
                    }
                }]
            }
        }]
    },
    "nodes": [{
        "count": "0",
        "cloudlets": 32,
        "image": "devbeta/docker-ce-compose",
        "nodeGroup": "extra",
        "displayName": "Extra"
    }],
    "onInstall": [{
            "install": {
                "jps": {
                    "type": "install",
                    "name": "Adjust Topology",
                    "id": "adjust-topology",
                    "region": "vz7",
                    "nodes": [{
                        "count": "${settings.mngr}",
                        "cloudlets": 32,
                        "image": "devbeta/docker-ce-compose",
                        "nodeGroup": "mngr",
                        "displayName": "Manager",
                        "extip": "true"
                    }, {
                        "count": "${settings.worker}",
                        "cloudlets": 32,
                        "image": "devbeta/docker-ce",
                        "nodeGroup": "cp",
                        "displayName": "Worker"
                    }]
                },
                "envName": "${env.envName}"
            }
        },
        "uploadKeys", {
            "if ('${settings.mode}' == 'cluster')": [{
                "log": "Master Manager Node Initialization"
            }, {
                "cmd[${nodes.mngr.first.id}]": [
                    "docker swarm init --advertise-addr ${nodes.mngr.first.extIPs[0]}"
                ]
            }, {
                "log": "Connecting additional Manager Nodes"
            }, {
                "forEach(nodes.mngr)": {
                    "if (${@i.id} != ${nodes.mngr.first.id})": {
                        "getToken": {
                            "id": "${@i.id}",
                            "role": "manager",
                            "next": "connectNode"
                        }
                    }
                }
            }, {
                "log": "Connecting Worker Nodes"
            }, {
                "forEach(nodes.cp)": {
                    "getToken": {
                        "id": "${@i.id}",
                        "role": "worker",
                        "next": "connectNode"
                    }
                }
            }, {
                "if ('${settings.stack}' == 'deploy')": "stackDeploy"
            }]
        }, {
            "if ('${settings.mode}' == 'single' && '${settings.compose}' == 'deploy') ": "composeUp"
        }
    ],
    "onAfterScaleOut[cp]": {
        "forEach(event.response.nodes)": [{
            "getToken": {
                "id": "${@i.id}",
                "role": "worker",
                "next": "connectNode"
            }
        }]
    },
    "onAfterScaleOut[mngr]": {
        "forEach(event.response.nodes)": [{
            "getToken": {
                "id": "${@i.id}",
                "role": "manager",
                "next": "connectNode"
            }
        }]
    },
    "onBeforeScaleIn[cp]": {
        "forEach(event.response.nodes)": {
            "removeNode": {
                "id": "${@i.id}"
            }
        }
    },
    "onBeforeScaleIn[mngr]": {
        "forEach(event.response.nodes)": {
            "removeNode": {
                "id": "${@i.id}"
            }
        }
    },
    "actions": {
        "getToken": {
            "script": [
                "//@req(next, role)",
                "ctl = jelastic.env.control, _ = {}, _.envName = '${env.envName}', _.session = session",
                "_.nodeId = '${nodes.mngr.first.id}', _.commandList = [{command: 'docker swarm join-token -q ' + role}]",
                "token = ctl.ExecCmdById(_).responses[0].out",
                "r = {result: 0, onAfterReturn: {}}",
                "r.onAfterReturn[next] = {token: token, id: getParam('id')}",
                "return r"
            ],
            "id": "${this.id}",
            "next": "${this.next}",
            "role": "${this.role}"
        },
        "connectNode": {
            "cmd[${this.id}]": [
                "docker swarm join --token ${this.token} ${nodes.mngr.first.intIP}:2377"
            ]
        },
        "removeNode": [{
            "cmd[${this.id}]": "docker swarm leave --force"
        }, {
            "cmd[${nodes.mngr.first.id}]": [
                "NODE=node${this.id}-${env.domain}",
                "docker node demote $NODE",
                "docker node rm --force $NODE"
            ]
        }],
        "stackDeploy": {
            "cmd[${nodes.mngr.first.id}]": [
                "docker network create --driver overlay proxy",
                "curl -o docker-compose-stack.yml ${settings.stack} &>> /var/log/run.log",
                "docker stack deploy -c docker-compose-stack.yml proxy &>> /var/log/run.log"
            ]
        },
        "composeUp": {
            "cmd[${nodes.mngr.first.id}]": [
                "git clone ${settings.repo} &>> /var/log/run.log",
                "cd example-voting-app && docker-compose up -d &>> /var/log/run.log"
            ]
        },
        "uploadKeys": {
            "script": [
                "var resp = jelastic.users.account.GetSSHKeys(appid, session, false);",
                "if (resp.result != 0 || resp.keys == null) return resp;",
                "if (resp.keys.length == 0) return { result: 'warning', message: 'Public SSH key was not found, please add a new public SSH key https://docs.jelastic.com/ssh-add-key' }",
                "//uploading the first public key",
                "return {result:0, onAfterReturn: {'cmd[${nodes.mngr.first.id}]': 'echo ' + resp.keys[0].publicKey + ' >> ~/.ssh/authorized_keys'}}"
            ]
        }
    },
    "success": "### Copy and execute in your console\n```\ndocker-machine create --driver generic \\\n--generic-ip-address=${nodes.mngr.first.extIPs[0]} \\\n--generic-ssh-key ~/.ssh/id_rsa \\\n--engine-storage-driver overlay ${env.envName}\neval $(docker-machine env ${env.envName})\n```",
    "jpsVersion": "0.99"
}