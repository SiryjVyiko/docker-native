{
  "jpsType": "update",
  "id": "docker-swarm-scaling",
  "name": "Docker Swarm Scaling",
  "globals": {
    "connect-node": "${settings.baseUrl}/scripts/connect-swarm-node.js",
    "update-tokens": "${settings.baseUrl}/scripts/update-swarm-tokens.js",
    "get-tokens": "${settings.baseUrl}/scripts/get-swarm-tokens.js"
  },
  "onInstall": [
    {
      "script": "${globals.update-tokens}",
      "nodeId": "${nodes.cp.first.id}"
    },
    {
      "log": "Connecting Manager Nodes"
    },
    {
      "forEach(nodes.cp)": {
        "if (${@i.id} != ${nodes.cp.first.id})": {
          "script": "${globals.connect-node}",
          "params": {
            "id": "${@i.id}",
            "role": "manager"
          }
        }
      }
    },
    {
      "log": "Connecting Worker Nodes"
    },
    {
      "forEach(nodes.worker)": {
        "script": "${globals.connect-node}",
        "id": "${@i.id}",
        "role": "worker"
      }
    },
    {
      "script": "${globals.get-tokens}",
      "next": "sendTokens"
    }
  ],
  "onAfterScaleOut[worker]": [
    {
      "script": "${globals.update-tokens}"
    },
    {
      "forEach(event.response.nodes)": {
        "script": "${globals.connect-node}",
        "id": "${@i.id}",
        "role": "worker"
      }
    }
  ],
  "onAfterScaleOut[cp]": [
    {
      "script": "${globals.update-tokens}"
    },
    {
      "forEach(event.response.nodes)": {
        "script": "${globals.connect-node}",
        "params": {
          "id": "${@i.id}",
          "role": "manager"
        }
      }
    }
  ],
  "onBeforeScaleIn[worker]": {
    "forEach(event.response.nodes)": {
      "removeNode": {
        "id": "${@i.id}"
      }
    }
  },
  "onBeforeScaleIn[cp]": {
    "forEach(event.response.nodes)": {
      "removeNode": {
        "id": "${@i.id}"
      }
    }
  },
  "actions": {
    "connectNode": {
      "cmd[${this.id}]": [
        "docker swarm leave --force &>> /var/log/run.log",
        "docker swarm join --token ${this.token} ${nodes.cp.first.intIP}:2377"
      ]
    },
    "removeNode": [
      {
        "cmd[${this.id}]": "docker swarm leave --force &>> /var/log/run.log"
      },
      {
        "cmd[${nodes.cp.first.id}]": [
          "NODE=node${this.id}-${env.domain}",
          "docker node demote $NODE &>> /var/log/run.log",
          "docker node rm --force $NODE &>> /var/log/run.log"
        ]
      }
    ],
    "sendTokens": {
      "install": {
        "jps": {
          "type": "update",
          "name": "show-success",
          "baseUrl": "${settings.baseUrl}",
          "success": {
            "text": "/text/swarm-success.mrkd",
            "email": "/text/swarm-success.mrkd"
          }
        },
        "settings": {
          "manager_token": "${this.manager}",
          "worker_token": "${this.worker}"
        }
      }
    }
  }
}
